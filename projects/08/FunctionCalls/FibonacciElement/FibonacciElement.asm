		@Sys.init			//0000	<-	WriteInit	<-	Main
		0;JMP			//0001	<-	WriteInit	<-	Main
	//function Main.fibonacci 0
//Main.fibonacci
		(Main.fibonacci)			//0002	<-	writeFunction	<-	Main
	//push argument 0
		@ARG			//0002	<-	writePushPop	<-	Main
		D=M			//0003	<-	writePushPop	<-	Main
		@0			//0004	<-	writePushPop	<-	Main
		A=D+A			//0005	<-	writePushPop	<-	Main
		D=M			//0006	<-	writePushPop	<-	Main
		@SP			//0007	<-	writePushPop	<-	Main
		A=M			//0008	<-	writePushPop	<-	Main
		M=D			//0009	<-	writePushPop	<-	Main
		@SP			//0010	<-	writePushPop	<-	Main
		M=M+1			//0011	<-	writePushPop	<-	Main
	//push constant 2
		@2			//0012	<-	writePushPop	<-	Main
		D=A			//0013	<-	writePushPop	<-	Main
		@SP			//0014	<-	writePushPop	<-	Main
		A=M			//0015	<-	writePushPop	<-	Main
		M=D			//0016	<-	writePushPop	<-	Main
		@SP			//0017	<-	writePushPop	<-	Main
		M=M+1			//0018	<-	writePushPop	<-	Main
	//lt
		@SP			//0019	<-	writeArithmetic	<-	Main
		M=M-1			//0020	<-	writeArithmetic	<-	Main
		A=M			//0021	<-	writeArithmetic	<-	Main
		D=M			//0022	<-	writeArithmetic	<-	Main
		@R13			//0023	<-	writeArithmetic	<-	Main
		M=D			//0024	<-	writeArithmetic	<-	Main
		@SP			//0025	<-	writeArithmetic	<-	Main
		A=M-1			//0026	<-	writeArithmetic	<-	Main
		D=M			//0027	<-	writeArithmetic	<-	Main
		@R13			//0028	<-	writeArithmetic	<-	Main
		D=D-M			//0029	<-	writeArithmetic	<-	Main
		@Main.fibonacci_LT_TRUE_CALL1			//0030	<-	writeArithmetic	<-	Main
		D;JLT			//0031	<-	writeArithmetic	<-	Main
		D=0			//0032	<-	writeArithmetic	<-	Main
		@Main.fibonacci_LT_END_CALL1			//0033	<-	writeArithmetic	<-	Main
		0;JMP			//0034	<-	writeArithmetic	<-	Main
		(Main.fibonacci_LT_TRUE_CALL1)			//0035	<-	writeArithmetic	<-	Main
		D=-1			//0035	<-	writeArithmetic	<-	Main
		(Main.fibonacci_LT_END_CALL1)			//0036	<-	writeArithmetic	<-	Main
		@SP			//0036	<-	writeArithmetic	<-	Main
		A=M-1			//0037	<-	writeArithmetic	<-	Main
		M=D			//0038	<-	writeArithmetic	<-	Main
	//if-goto IF_TRUE
		@SP			//0039	<-	writeIf	<-	Main
		M=M-1			//0040	<-	writeIf	<-	Main
		@SP			//0041	<-	writeIf	<-	Main
		A=M			//0042	<-	writeIf	<-	Main
		D=M			//0043	<-	writeIf	<-	Main
		@Main.fibonacci$IF_TRUE			//0044	<-	writeIf	<-	Main
		D;JNE			//0045	<-	writeIf	<-	Main
	//goto IF_FALSE
		@Main.fibonacci$IF_FALSE			//0046	<-	writeGoto	<-	Main
		0;JMP			//0047	<-	writeGoto	<-	Main
	//label IF_TRUE
		(Main.fibonacci$IF_TRUE)			//0048	<-	writeLabel	<-	Main
	//push argument 0
		@ARG			//0048	<-	writePushPop	<-	Main
		D=M			//0049	<-	writePushPop	<-	Main
		@0			//0050	<-	writePushPop	<-	Main
		A=D+A			//0051	<-	writePushPop	<-	Main
		D=M			//0052	<-	writePushPop	<-	Main
		@SP			//0053	<-	writePushPop	<-	Main
		A=M			//0054	<-	writePushPop	<-	Main
		M=D			//0055	<-	writePushPop	<-	Main
		@SP			//0056	<-	writePushPop	<-	Main
		M=M+1			//0057	<-	writePushPop	<-	Main
	//return
		@LCL			//0058	<-	writeReturn	<-	Main
		D=M			//0059	<-	writeReturn	<-	Main
		@R13			//0060	<-	writeReturn	<-	Main
		M=D			//0061	<-	writeReturn	<-	Main
		@5			//0062	<-	writeReturn	<-	Main
		A=D-A			//0063	<-	writeReturn	<-	Main
		D=M			//0064	<-	writeReturn	<-	Main
		@R14			//0065	<-	writeReturn	<-	Main
		M=D			//0066	<-	writeReturn	<-	Main
		@SP			//0067	<-	writeReturn	<-	Main
		M=M-1			//0068	<-	writeReturn	<-	Main
		@SP			//0069	<-	writeReturn	<-	Main
		A=M			//0070	<-	writeReturn	<-	Main
		D=M			//0071	<-	writeReturn	<-	Main
		@ARG			//0072	<-	writeReturn	<-	Main
		A=M			//0073	<-	writeReturn	<-	Main
		M=D			//0074	<-	writeReturn	<-	Main
		@ARG			//0075	<-	writeReturn	<-	Main
		D=M+1			//0076	<-	writeReturn	<-	Main
		@SP			//0077	<-	writeReturn	<-	Main
		M=D			//0078	<-	writeReturn	<-	Main
		@R13			//0079	<-	writeReturn	<-	Main
		AM=M-1			//0080	<-	writeReturn	<-	Main
		D=M			//0081	<-	writeReturn	<-	Main
		@THAT			//0082	<-	writeReturn	<-	Main
		M=D			//0083	<-	writeReturn	<-	Main
		@R13			//0084	<-	writeReturn	<-	Main
		AM=M-1			//0085	<-	writeReturn	<-	Main
		D=M			//0086	<-	writeReturn	<-	Main
		@THIS			//0087	<-	writeReturn	<-	Main
		M=D			//0088	<-	writeReturn	<-	Main
		@R13			//0089	<-	writeReturn	<-	Main
		AM=M-1			//0090	<-	writeReturn	<-	Main
		D=M			//0091	<-	writeReturn	<-	Main
		@ARG			//0092	<-	writeReturn	<-	Main
		M=D			//0093	<-	writeReturn	<-	Main
		@R13			//0094	<-	writeReturn	<-	Main
		AM=M-1			//0095	<-	writeReturn	<-	Main
		D=M			//0096	<-	writeReturn	<-	Main
		@LCL			//0097	<-	writeReturn	<-	Main
		M=D			//0098	<-	writeReturn	<-	Main
		@R14			//0099	<-	writeReturn	<-	Main
		A=M			//0100	<-	writeReturn	<-	Main
		0;JMP			//0101	<-	writeReturn	<-	Main
	//label IF_FALSE
		(Main.fibonacci$IF_FALSE)			//0102	<-	writeLabel	<-	Main
	//push argument 0
		@ARG			//0102	<-	writePushPop	<-	Main
		D=M			//0103	<-	writePushPop	<-	Main
		@0			//0104	<-	writePushPop	<-	Main
		A=D+A			//0105	<-	writePushPop	<-	Main
		D=M			//0106	<-	writePushPop	<-	Main
		@SP			//0107	<-	writePushPop	<-	Main
		A=M			//0108	<-	writePushPop	<-	Main
		M=D			//0109	<-	writePushPop	<-	Main
		@SP			//0110	<-	writePushPop	<-	Main
		M=M+1			//0111	<-	writePushPop	<-	Main
	//push constant 2
		@2			//0112	<-	writePushPop	<-	Main
		D=A			//0113	<-	writePushPop	<-	Main
		@SP			//0114	<-	writePushPop	<-	Main
		A=M			//0115	<-	writePushPop	<-	Main
		M=D			//0116	<-	writePushPop	<-	Main
		@SP			//0117	<-	writePushPop	<-	Main
		M=M+1			//0118	<-	writePushPop	<-	Main
	//sub
		@SP			//0119	<-	writeArithmetic	<-	Main
		M=M-1			//0120	<-	writeArithmetic	<-	Main
		A=M			//0121	<-	writeArithmetic	<-	Main
		D=M			//0122	<-	writeArithmetic	<-	Main
		@R13			//0123	<-	writeArithmetic	<-	Main
		M=D			//0124	<-	writeArithmetic	<-	Main
		@SP			//0125	<-	writeArithmetic	<-	Main
		A=M-1			//0126	<-	writeArithmetic	<-	Main
		D=M			//0127	<-	writeArithmetic	<-	Main
		@R13			//0128	<-	writeArithmetic	<-	Main
		D=D-M			//0129	<-	writeArithmetic	<-	Main
		@SP			//0130	<-	writeArithmetic	<-	Main
		A=M-1			//0131	<-	writeArithmetic	<-	Main
		M=D			//0132	<-	writeArithmetic	<-	Main
	//call Main.fibonacci 1
		@Main.fibonacci_FUNC_CALL3			//0133	<-	writeCall	<-	Main
		D=A			//0134	<-	writeCall	<-	Main
		@SP			//0135	<-	writeCall	<-	Main
		A=M			//0136	<-	writeCall	<-	Main
		M=D			//0137	<-	writeCall	<-	Main
		@SP			//0138	<-	writeCall	<-	Main
		M=M+1			//0139	<-	writeCall	<-	Main
		@LCL			//0140	<-	writeCall	<-	Main
		D=M			//0141	<-	writeCall	<-	Main
		@SP			//0142	<-	writeCall	<-	Main
		A=M			//0143	<-	writeCall	<-	Main
		M=D			//0144	<-	writeCall	<-	Main
		@SP			//0145	<-	writeCall	<-	Main
		M=M+1			//0146	<-	writeCall	<-	Main
		@ARG			//0147	<-	writeCall	<-	Main
		D=M			//0148	<-	writeCall	<-	Main
		@SP			//0149	<-	writeCall	<-	Main
		A=M			//0150	<-	writeCall	<-	Main
		M=D			//0151	<-	writeCall	<-	Main
		@SP			//0152	<-	writeCall	<-	Main
		M=M+1			//0153	<-	writeCall	<-	Main
		@THIS			//0154	<-	writeCall	<-	Main
		D=M			//0155	<-	writeCall	<-	Main
		@SP			//0156	<-	writeCall	<-	Main
		A=M			//0157	<-	writeCall	<-	Main
		M=D			//0158	<-	writeCall	<-	Main
		@SP			//0159	<-	writeCall	<-	Main
		M=M+1			//0160	<-	writeCall	<-	Main
		@THAT			//0161	<-	writeCall	<-	Main
		D=M			//0162	<-	writeCall	<-	Main
		@SP			//0163	<-	writeCall	<-	Main
		A=M			//0164	<-	writeCall	<-	Main
		M=D			//0165	<-	writeCall	<-	Main
		@SP			//0166	<-	writeCall	<-	Main
		M=M+1			//0167	<-	writeCall	<-	Main
		@SP			//0168	<-	writeCall	<-	Main
		D=M			//0169	<-	writeCall	<-	Main
		@6			//0170	<-	writeCall	<-	Main
		D=D-A			//0171	<-	writeCall	<-	Main
		@ARG			//0172	<-	writeCall	<-	Main
		M=D			//0173	<-	writeCall	<-	Main
		@SP			//0174	<-	writeCall	<-	Main
		D=M			//0175	<-	writeCall	<-	Main
		@LCL			//0176	<-	writeCall	<-	Main
		M=D			//0177	<-	writeCall	<-	Main
		@Main.fibonacci			//0178	<-	writeCall	<-	Main
		0;JMP			//0179	<-	writeCall	<-	Main
		(Main.fibonacci_FUNC_CALL3)			//0180	<-	writeCall	<-	Main
	//push argument 0
		@ARG			//0180	<-	writePushPop	<-	Main
		D=M			//0181	<-	writePushPop	<-	Main
		@0			//0182	<-	writePushPop	<-	Main
		A=D+A			//0183	<-	writePushPop	<-	Main
		D=M			//0184	<-	writePushPop	<-	Main
		@SP			//0185	<-	writePushPop	<-	Main
		A=M			//0186	<-	writePushPop	<-	Main
		M=D			//0187	<-	writePushPop	<-	Main
		@SP			//0188	<-	writePushPop	<-	Main
		M=M+1			//0189	<-	writePushPop	<-	Main
	//push constant 1
		@1			//0190	<-	writePushPop	<-	Main
		D=A			//0191	<-	writePushPop	<-	Main
		@SP			//0192	<-	writePushPop	<-	Main
		A=M			//0193	<-	writePushPop	<-	Main
		M=D			//0194	<-	writePushPop	<-	Main
		@SP			//0195	<-	writePushPop	<-	Main
		M=M+1			//0196	<-	writePushPop	<-	Main
	//sub
		@SP			//0197	<-	writeArithmetic	<-	Main
		M=M-1			//0198	<-	writeArithmetic	<-	Main
		A=M			//0199	<-	writeArithmetic	<-	Main
		D=M			//0200	<-	writeArithmetic	<-	Main
		@R13			//0201	<-	writeArithmetic	<-	Main
		M=D			//0202	<-	writeArithmetic	<-	Main
		@SP			//0203	<-	writeArithmetic	<-	Main
		A=M-1			//0204	<-	writeArithmetic	<-	Main
		D=M			//0205	<-	writeArithmetic	<-	Main
		@R13			//0206	<-	writeArithmetic	<-	Main
		D=D-M			//0207	<-	writeArithmetic	<-	Main
		@SP			//0208	<-	writeArithmetic	<-	Main
		A=M-1			//0209	<-	writeArithmetic	<-	Main
		M=D			//0210	<-	writeArithmetic	<-	Main
	//call Main.fibonacci 1
		@Main.fibonacci_FUNC_CALL5			//0211	<-	writeCall	<-	Main
		D=A			//0212	<-	writeCall	<-	Main
		@SP			//0213	<-	writeCall	<-	Main
		A=M			//0214	<-	writeCall	<-	Main
		M=D			//0215	<-	writeCall	<-	Main
		@SP			//0216	<-	writeCall	<-	Main
		M=M+1			//0217	<-	writeCall	<-	Main
		@LCL			//0218	<-	writeCall	<-	Main
		D=M			//0219	<-	writeCall	<-	Main
		@SP			//0220	<-	writeCall	<-	Main
		A=M			//0221	<-	writeCall	<-	Main
		M=D			//0222	<-	writeCall	<-	Main
		@SP			//0223	<-	writeCall	<-	Main
		M=M+1			//0224	<-	writeCall	<-	Main
		@ARG			//0225	<-	writeCall	<-	Main
		D=M			//0226	<-	writeCall	<-	Main
		@SP			//0227	<-	writeCall	<-	Main
		A=M			//0228	<-	writeCall	<-	Main
		M=D			//0229	<-	writeCall	<-	Main
		@SP			//0230	<-	writeCall	<-	Main
		M=M+1			//0231	<-	writeCall	<-	Main
		@THIS			//0232	<-	writeCall	<-	Main
		D=M			//0233	<-	writeCall	<-	Main
		@SP			//0234	<-	writeCall	<-	Main
		A=M			//0235	<-	writeCall	<-	Main
		M=D			//0236	<-	writeCall	<-	Main
		@SP			//0237	<-	writeCall	<-	Main
		M=M+1			//0238	<-	writeCall	<-	Main
		@THAT			//0239	<-	writeCall	<-	Main
		D=M			//0240	<-	writeCall	<-	Main
		@SP			//0241	<-	writeCall	<-	Main
		A=M			//0242	<-	writeCall	<-	Main
		M=D			//0243	<-	writeCall	<-	Main
		@SP			//0244	<-	writeCall	<-	Main
		M=M+1			//0245	<-	writeCall	<-	Main
		@SP			//0246	<-	writeCall	<-	Main
		D=M			//0247	<-	writeCall	<-	Main
		@6			//0248	<-	writeCall	<-	Main
		D=D-A			//0249	<-	writeCall	<-	Main
		@ARG			//0250	<-	writeCall	<-	Main
		M=D			//0251	<-	writeCall	<-	Main
		@SP			//0252	<-	writeCall	<-	Main
		D=M			//0253	<-	writeCall	<-	Main
		@LCL			//0254	<-	writeCall	<-	Main
		M=D			//0255	<-	writeCall	<-	Main
		@Main.fibonacci			//0256	<-	writeCall	<-	Main
		0;JMP			//0257	<-	writeCall	<-	Main
		(Main.fibonacci_FUNC_CALL5)			//0258	<-	writeCall	<-	Main
	//add
		@SP			//0258	<-	writeArithmetic	<-	Main
		M=M-1			//0259	<-	writeArithmetic	<-	Main
		A=M			//0260	<-	writeArithmetic	<-	Main
		D=M			//0261	<-	writeArithmetic	<-	Main
		@R13			//0262	<-	writeArithmetic	<-	Main
		M=D			//0263	<-	writeArithmetic	<-	Main
		@SP			//0264	<-	writeArithmetic	<-	Main
		A=M-1			//0265	<-	writeArithmetic	<-	Main
		D=M			//0266	<-	writeArithmetic	<-	Main
		@R13			//0267	<-	writeArithmetic	<-	Main
		D=D+M			//0268	<-	writeArithmetic	<-	Main
		@SP			//0269	<-	writeArithmetic	<-	Main
		A=M-1			//0270	<-	writeArithmetic	<-	Main
		M=D			//0271	<-	writeArithmetic	<-	Main
	//return
		@LCL			//0272	<-	writeReturn	<-	Main
		D=M			//0273	<-	writeReturn	<-	Main
		@R13			//0274	<-	writeReturn	<-	Main
		M=D			//0275	<-	writeReturn	<-	Main
		@5			//0276	<-	writeReturn	<-	Main
		A=D-A			//0277	<-	writeReturn	<-	Main
		D=M			//0278	<-	writeReturn	<-	Main
		@R14			//0279	<-	writeReturn	<-	Main
		M=D			//0280	<-	writeReturn	<-	Main
		@SP			//0281	<-	writeReturn	<-	Main
		M=M-1			//0282	<-	writeReturn	<-	Main
		@SP			//0283	<-	writeReturn	<-	Main
		A=M			//0284	<-	writeReturn	<-	Main
		D=M			//0285	<-	writeReturn	<-	Main
		@ARG			//0286	<-	writeReturn	<-	Main
		A=M			//0287	<-	writeReturn	<-	Main
		M=D			//0288	<-	writeReturn	<-	Main
		@ARG			//0289	<-	writeReturn	<-	Main
		D=M+1			//0290	<-	writeReturn	<-	Main
		@SP			//0291	<-	writeReturn	<-	Main
		M=D			//0292	<-	writeReturn	<-	Main
		@R13			//0293	<-	writeReturn	<-	Main
		AM=M-1			//0294	<-	writeReturn	<-	Main
		D=M			//0295	<-	writeReturn	<-	Main
		@THAT			//0296	<-	writeReturn	<-	Main
		M=D			//0297	<-	writeReturn	<-	Main
		@R13			//0298	<-	writeReturn	<-	Main
		AM=M-1			//0299	<-	writeReturn	<-	Main
		D=M			//0300	<-	writeReturn	<-	Main
		@THIS			//0301	<-	writeReturn	<-	Main
		M=D			//0302	<-	writeReturn	<-	Main
		@R13			//0303	<-	writeReturn	<-	Main
		AM=M-1			//0304	<-	writeReturn	<-	Main
		D=M			//0305	<-	writeReturn	<-	Main
		@ARG			//0306	<-	writeReturn	<-	Main
		M=D			//0307	<-	writeReturn	<-	Main
		@R13			//0308	<-	writeReturn	<-	Main
		AM=M-1			//0309	<-	writeReturn	<-	Main
		D=M			//0310	<-	writeReturn	<-	Main
		@LCL			//0311	<-	writeReturn	<-	Main
		M=D			//0312	<-	writeReturn	<-	Main
		@R14			//0313	<-	writeReturn	<-	Main
		A=M			//0314	<-	writeReturn	<-	Main
		0;JMP			//0315	<-	writeReturn	<-	Main
	//function Sys.init 0
//Sys.init
		(Sys.init)			//0316	<-	writeFunction	<-	Main
	//push constant 4
		@4			//0316	<-	writePushPop	<-	Main
		D=A			//0317	<-	writePushPop	<-	Main
		@SP			//0318	<-	writePushPop	<-	Main
		A=M			//0319	<-	writePushPop	<-	Main
		M=D			//0320	<-	writePushPop	<-	Main
		@SP			//0321	<-	writePushPop	<-	Main
		M=M+1			//0322	<-	writePushPop	<-	Main
	//call Main.fibonacci 1
		@Main.fibonacci_FUNC_CALL7			//0323	<-	writeCall	<-	Main
		D=A			//0324	<-	writeCall	<-	Main
		@SP			//0325	<-	writeCall	<-	Main
		A=M			//0326	<-	writeCall	<-	Main
		M=D			//0327	<-	writeCall	<-	Main
		@SP			//0328	<-	writeCall	<-	Main
		M=M+1			//0329	<-	writeCall	<-	Main
		@LCL			//0330	<-	writeCall	<-	Main
		D=M			//0331	<-	writeCall	<-	Main
		@SP			//0332	<-	writeCall	<-	Main
		A=M			//0333	<-	writeCall	<-	Main
		M=D			//0334	<-	writeCall	<-	Main
		@SP			//0335	<-	writeCall	<-	Main
		M=M+1			//0336	<-	writeCall	<-	Main
		@ARG			//0337	<-	writeCall	<-	Main
		D=M			//0338	<-	writeCall	<-	Main
		@SP			//0339	<-	writeCall	<-	Main
		A=M			//0340	<-	writeCall	<-	Main
		M=D			//0341	<-	writeCall	<-	Main
		@SP			//0342	<-	writeCall	<-	Main
		M=M+1			//0343	<-	writeCall	<-	Main
		@THIS			//0344	<-	writeCall	<-	Main
		D=M			//0345	<-	writeCall	<-	Main
		@SP			//0346	<-	writeCall	<-	Main
		A=M			//0347	<-	writeCall	<-	Main
		M=D			//0348	<-	writeCall	<-	Main
		@SP			//0349	<-	writeCall	<-	Main
		M=M+1			//0350	<-	writeCall	<-	Main
		@THAT			//0351	<-	writeCall	<-	Main
		D=M			//0352	<-	writeCall	<-	Main
		@SP			//0353	<-	writeCall	<-	Main
		A=M			//0354	<-	writeCall	<-	Main
		M=D			//0355	<-	writeCall	<-	Main
		@SP			//0356	<-	writeCall	<-	Main
		M=M+1			//0357	<-	writeCall	<-	Main
		@SP			//0358	<-	writeCall	<-	Main
		D=M			//0359	<-	writeCall	<-	Main
		@6			//0360	<-	writeCall	<-	Main
		D=D-A			//0361	<-	writeCall	<-	Main
		@ARG			//0362	<-	writeCall	<-	Main
		M=D			//0363	<-	writeCall	<-	Main
		@SP			//0364	<-	writeCall	<-	Main
		D=M			//0365	<-	writeCall	<-	Main
		@LCL			//0366	<-	writeCall	<-	Main
		M=D			//0367	<-	writeCall	<-	Main
		@Main.fibonacci			//0368	<-	writeCall	<-	Main
		0;JMP			//0369	<-	writeCall	<-	Main
		(Main.fibonacci_FUNC_CALL7)			//0370	<-	writeCall	<-	Main
	//label WHILE
		(Sys.init$WHILE)			//0370	<-	writeLabel	<-	Main
	//goto WHILE
		@Sys.init$WHILE			//0370	<-	writeGoto	<-	Main
		0;JMP			//0371	<-	writeGoto	<-	Main
