// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:ARegister,DRegister,ALU
	
	////////////////////////////////////////////////decode
	Not16(in=instruction,out=Notinstruction);
	Not16(in=Notinstruction,
		out[15]=ctrlI,
		out[12]=ctrlA,
		out[11]=ctrlC1,
		out[10]=ctrlC2,
		out[9]=ctrlC3,
		out[8]=ctrlC4,
		out[7]=ctrlC5,
		out[6]=ctrlC6,
		out[5]=ctrlD1,
		out[4]=ctrlD2,
		out[3]=ctrlD3,
		out[2]=ctrlJ1,
		out[1]=ctrlJ2,
		out[0]=ctrlJ3
		);	
	////////////////////////////////////////////////execute

	//制御aビットによりALUへの入力を選択する.a=0ならA,a=1ならD
	Mux16(a=Aout,b=inM,sel=ctrlA,out=ALUin);
	
	ALU(x=Dout,y=ALUin,
	zx=ctrlC1,
	nx=ctrlC2,
	zy=ctrlC3,
	ny=ctrlC4,
	f=ctrlC5,
	no=ctrlC6,
	out=ALUout,out=outM,
	zr=ZRout,	//ゼロの時１
	ng=NGout	//負の時１
	);
	
	//制御dビットによりALUoutの書き込み先を選択する
		//Aレジスタ	d1　または　A命令（この時はinstructionをAレジスタに入れる）
		Mux16(a=instruction, b=ALUout, sel=ctrlI, out=ARegin);
		Not(in=ctrlI,out=Ainst);
		Or(a=Ainst,b=ctrlD1,out=Aload);
		ARegister(in=ARegin, load=Aload, out=Aout,out[0..14]=addressM);
		//Dレジスタ　d2ビット　かつ　C命令（A命令でない）
		And(a=ctrlD2,b=ctrlI,out=Dload);
		DRegister(in=ALUout, load=Dload, out=Dout);
		//メモリ	d3ビット　かつ　C命令（A命令でない）
		And(a=ctrlD3,b=ctrlI,out=writeM);
	
	//
	////////////////////////////////////////////////fetch
		
	//j1が立ってて計算結果も負→ジャンプ1
	And(a=ctrlJ1,b=NGout,out=jump1);
	//j2が立ってて計算結果がゼロ→ジャンプ2
	And(a=ctrlJ2,b=ZRout,out=jump2);
	//j3が立ってて計算結果が正（NGout=0かつZRout＝0）→ジャンプ3
	Not(in=NGout,out=PGout);
	Not(in=ZRout,out=NotZRout);
	And(a=ctrlJ3,b=PGout,out=temp);
	And(a=temp,b=NotZRout,out=jump3);
	//ジャンプ1~3のOR
	Or8Way(in[0]=jump1,in[1]=jump2,in[2]=jump3,in[4..7]=false,out=jump);
	//ただし,そもそもA命令ならジャンプしない
	And(a=jump,b=ctrlI,out=PCload);
	
    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc);
	
}